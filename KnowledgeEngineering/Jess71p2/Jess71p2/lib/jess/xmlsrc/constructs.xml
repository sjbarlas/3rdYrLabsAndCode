<?xml version="1.0" encoding="US-ASCII"?>

<doc name="constructs">

  <chapter heading="Jess Constructs" stylesheet="stylesheet.css" >

    <p>A <i>construct</i> is something that looks like a function, but
    isn't one. It generally has odd syntax that can't be used in a regular
    function call. Most of the names starting with "def-" in Jess are
    construct names: defrule, defglobal, etc. You can only use
    constructs at the top level of a Jess program -- i.e., you can't use
    a construct on the right hand side of a rule, or inside a
    function.</p>

    <p>A construct is basically the same as a <i>special form</i> in
    Lisp or Scheme. The odd syntax has to be handled specially by the
    parser, hence the name. </p>

    <constructlist>
      <!-- *********************************************************** -->

      <constructdef name="defrule">
        <syntax>
<shell>
(defrule <i>rule-name</i>
    ["Documentation comment"]
    [(declare (salience <i>value</i>)
              (node-index-hash <i>value</i>)
              (auto-focus TRUE | FALSE)
              (no-loop TRUE | FALSE))]
    <i>conditional element</i>*
    =>
    <i>function call</i>* )
</shell>
        </syntax>

        <description>A <i>rule</i> consists of a left-hand side, the
          symbol "=>", and a right-hand side, in that order. The
          left-hand side is made up of zero or more <i>conditional
          elements</i>, while the right-hand side consists of zero or
          more function calls. A conditional element is either a
          <i>pattern</i>, or a grouping construct like "and", "or", or
          "not." The conditional elements are matched against Jess's
          working memory. When they all match, and if the engine is
          running, the code on the rule's right-hand side will be
          executed.</description>
      </constructdef>

      <!-- *********************************************************** -->

      <constructdef name="defquery">
        <syntax>
<shell>
(defquery <i>query-name</i>
    ["Documentation comment"]
    [(declare (variables <i>variable</i>+)
              (node-index-hash <i>value</i>)
              (max-background-rules <i>value</i>))]
    <i>conditional element</i>* )
</shell>
        </syntax>

        <description>A <i>query</i> consists of an optional variable
          declaration followed by a list of <i>conditional
          elements.</i> A conditional element is either a
          <i>pattern</i>, or a grouping construct like "and", "or", or
          "not." Queries are used to search working memory for facts
          that satisfy the conditional elements. A query can be
          invoked using the "run-query*" function. </description>
      </constructdef>

      <!-- *********************************************************** -->

      <constructdef name="deffunction">
        <syntax>
<shell>
(deffunction <i>function-name</i> (<i>argument</i>*)
    ["Documentation comment"]
    <i>function call</i>* )
</shell>
        </syntax>

        <description>A <i>deffunction</i> is a function written in the
          Jess language. You can call deffunctions from the Jess
          prompt, from a rule, or from another deffunction. </description>
      </constructdef>

      <!-- *********************************************************** -->

      <constructdef name="deffacts">
        <syntax>
<shell>
(deffacts <i>deffacts-name</i>
    ["Documentation comment"]
    <i>fact</i>* )
</shell>
        </syntax>

        <description>A <i>deffacts</i> is just a list of facts. When
          the "reset" function is called, Jess clears working memory,
          asserts the special "initial-fact" fact, and then asserts
          all the facts defined by deffacts. </description>
      </constructdef>

      <!-- *********************************************************** -->

      <constructdef name="defglobal">
        <syntax>
<shell>
(defglobal ?<i>name</i> = <i>value</i>
           [?<i>name</i> = <i>value</i>]* )
</shell>
        </syntax>

        <description>A <i>defglobal</i> construct defines one or more
          global variables and sets their initial values. <b>The name of
          a global variable must begin and end with an asterisk
          (*)</b>.</description>
      </constructdef>


      <!-- *********************************************************** -->

      <constructdef name="defmodule">
        <syntax>
<shell>
(defmodule <i>module-name</i>
    ["Documentation comment"]
    [(declare (auto-focus <i>value</i>))]
    )
</shell>                        
        </syntax>

        <description> The <i>defmodule</i> construct introduces a Jess module. The
          current module is set to be the new module, so any rules
          defined after a defmodule will implicitly belong to that module. If a module has the <tt>auto-focus</tt> property,
        then all the rules in that module have the <tt>auto-focus</tt> property.</description>
      </constructdef>

      <!-- *********************************************************** -->

      <constructdef name="deftemplate">
        <syntax>
<shell>
(deftemplate <i>template-name</i>
    [extends <i>template-name</i>]
    ["Documentation comment"]
    [(declare  (slot-specific TRUE | <b>FALSE</b>)
               (backchain-reactive TRUE | <b>FALSE</b>)
               (from-class <i>class name</i>)
               (include-variables TRUE | <b>FALSE</b>)
               (ordered TRUE | <b>FALSE</b>))]
     (slot | multislot <i>slot-name</i>
         ([(type ANY | INTEGER | FLOAT | NUMBER | SYMBOL | STRING |
                LEXEME | OBJECT | LONG)]
         [(default <i>default value</i>)]
         [(default-dynamic <i>expression</i>)]
         [(allowed-values <i>expression</i>+)])*)
</shell>
        </syntax>

        <description><p>A <i>deftemplate</i> describes a kind of fact,
          precisely in the same way as a Java class describes a kind
          of object. In particular, a deftemplate lists the "member
          variables" (called <i>slots</i>) that this particular kind
          of fact can have.</p>

        <p>Deftemplate definitions can include a "declare" section. Each
        declaration will affect either how the template is defined or
        how facts that use the template will behave.</p>

        <p>The first declaration we'll learn about is
        <tt>slot-specific</tt>. A template with this declaration will be
        matched in a special way: if a fact, created from such a
        template, which matches the left-hand-side of a rule is
        modified, the result depends on whether the modified slot is
        named in the pattern used to match the fact. As an example,
        consider the following:</p>

            <jess noprompt="TRUE" noclear="TRUE">
<input>(deftemplate D (declare (slot-specific TRUE)) (slot A) (slot B))

(defrule R
  ?d &lt;- (D (A 1))
  =>
  (modify ?d (B 3)))</input>
            </jess>

            <p> Without the "slot-specific" declaration, this rule would
                enter an endless loop, because it modifies a fact matched on the
                LHS in such a way that the modified fact will still match. With
                the declaration, it can simply fire once. This behavior is
                actually what many new users expect as the default, so the <tt>slot-specific</tt>
                declaration probably ought to be used most of the time.
                </p>


<p>The <tt>from-class</tt> declaration lets you derive a template from
a Java class. By default, only JavaBeans properties generate slots. But if you
include the optional <tt>(include-variables TRUE)</tt> declaration in
your template, then Jess will also create slots corresponding to the
public instance variables of the class.</p>

            <p>Other declarations are described in <link
            href="memory.html">this chapter.</link></p>

	    <p>The <tt>backchain-reactive</tt> and <tt>slot-specific</tt> declarations are inherited by child templates.
	    </p>


	</description>
      </constructdef>
    </constructlist>
  </chapter>
</doc>
